@inject NavigationManager NavigationManager
@inject IUserService UserService

<div class="nav-search">
    <div class="input-group">
        <input @bind-value="searchText"
               @bind-value:event="oninput"
               type="search"
               list="users"
               @onkeyup="HandleSearch"
               class="form-control"
               placeholder="Buscar Usuarios..."
               @ref="searchInput"
               style="border-style: none; box-shadow: none;" />
        <div class="input-group-append">
            <button>
                <span class="oi oi-magnifying-glass"></span>
            </button>
        </div>
    </div>
</div>
<ul class="user-list">
    @foreach (var suggestion in suggestions)
    {

        <li class="user-item">
            <a href="profile/@suggestion.UserId" class="user-link">
                @if (suggestion.ProfilePicture != string.Empty)
                {
                    <img src="@suggestion.ProfilePicture" alt="@suggestion.Name" class="profile-image">
                }
                else
                {
                    <img src="/images/user.png" alt="@suggestion.Name" class="profile-image">
                }
                <span class="user-name">@suggestion.Name</span>
                @if (@suggestion.IsONGVerified)
                {
                    <MudIcon Class="ml-1" Icon="@Icons.Material.Filled.Verified" Size="Size.Small" Color="Color.Info" Title="Verified" />
                }
            </a>
        </li>
    }
</ul>

@code {
    private string searchText = string.Empty;
    private List<UserSearchResultDTO> suggestions = new List<UserSearchResultDTO>();
    protected ElementReference searchInput;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await searchInput.FocusAsync();
        }
    }

    public async Task HandleSearch(KeyboardEventArgs args)
    {
        if (searchText.Length > 1)
        {
            suggestions = await UserService.GetUsersSearchSuggestions(searchText);
        }
        if (searchText.Length == 0)
        {
            suggestions.Clear();
        }
    }
}