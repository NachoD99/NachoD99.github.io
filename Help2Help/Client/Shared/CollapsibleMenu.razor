
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="dropdown">
    <MudIconButton @onclick="ToggleUserMenu" @onfocusout="HideUserMenu" class="btn btn-secondary dropdown-toggle user-button" Icon="@Icons.Material.Filled.Menu" aria-label="menu">
        <i class="oi oi-person"></i>
    </MudIconButton>
    <div class="dropdown-menu dropdown-menu-right @UserMenuCssClass">
        <AuthorizeView>
            <a href="HelpUsToHelp" class="dropdown-item">Ayudanos a ayudar</a>
            <a href="Event" class="dropdown-item">Crear Evento</a>
        </AuthorizeView>
    </div>
</div>

@code {
    private bool showUserMenu = false;

    private string UserMenuCssClass => showUserMenu ? "show-menu" : null;

    private void ToggleUserMenu() => showUserMenu = !showUserMenu;

    private async Task HideUserMenu()
    {
        await Task.Delay(200);
        showUserMenu = false;
    }

    private async Task Logout()
    {
        await LocalStorage.RemoveItemAsync("authToken");
        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        NavigationManager.NavigateTo("/");
    }
}