@inject ISnackbar Snackbar
@inject IPublicationService PublicationService
@implements IDisposable

<MudDialog Style="width:90vw">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudText Typo="Typo.h6" Align="Align.Center">Crear publicación</MudText>
        </MudText>
    </TitleContent>
    <DialogContent>
        @*<MudTextField Value="@publication.Title" Label="Título" ReadOnly="false" />*@
        <MudTextField T="string" DisableUnderLine="true" @bind-Value="@publication.Description" Label="Descripción" ReadOnly="false" Lines="5" />

        <MudPaper Class="d-flex ma-2" Elevation="0" Outlined="true">
            <MudGrid Spacing="0" Justify="Justify.Center" Style="margin:0;padding:0; height:3em; width:100vw; ">
                <MudItem Style="width:85%;margin:0;padding:0;">
                    <MudText Class="mt-2 ml-2">Añadir a tu publicación</MudText>
                </MudItem>
                @*AGREGAR URL*@
                <MudItem Style="width:15%;margin:0;padding:0;">
                    <MudFileUpload T="IReadOnlyList<IBrowserFile>" Multiple Accept=".png,.jpg,.jpeg,.svg" OnFilesChanged="UploadProfilePicture" Class="mt-0 mb-0" MaximumFileCount="5">
                        <ButtonTemplate>
                            <MudIconButton Style="position: absolute;"
                                           HtmlTag="label"
                                           Class="mx-auto"
                                           Color="Color.Dark"
                                           Icon="@Icons.Filled.PhotoCamera"
                                           for="@context">
                            </MudIconButton>
                        </ButtonTemplate>
                    </MudFileUpload>
                </MudItem>
            </MudGrid>
        </MudPaper>
        @if (images.Count > 0)
        {
            <div style="display:flex;flex-wrap:wrap; margin:0; padding:0;">
                @foreach (var image in images)
                {
                    <MudIconButton Class="mb-1 ml-0 pl-0" Style="bottom:0.1em;left:3.9em;z-index:10;margin:0;padding:0;height:1em;"
                           Icon="@Icons.Material.Filled.Close"
                           @onclick="@(() => DeletePhoto(image.Guid))"
                           Color="Color.Dark"></MudIconButton>

                    <MudImage Src="@image.FileContent"
                      Width="90"
                      Height="90"
                      Alt="Mony the dog"
                      Elevation="25"
                      Class="rounded-lg mb-1 ml-0" />
                }
            </div>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="@(string.IsNullOrWhiteSpace(publication.Description)  ? true : false)" Variant="Variant.Filled" Color="Color.Primary" FullWidth="true" OnClick="CreatePublication">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Creando...</MudText>
            }
            else
            {
                <MudText>Crear</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    public PublicationResponseDTO publication { get; set; } = new PublicationResponseDTO();
    public List<Image> images { get; set; } = new List<Image>();
    private bool _processing = false;

    private async Task CreatePublication()
    {
        _processing = true;

        if (images.Count > 0) publication.Images = images;
        var result = await PublicationService.CreatePublication(publication);

        if (result != null)
        {
            Snackbar.Add("Publicación creada correctamente", Severity.Success);
            await InvokeAsync(() => { StateHasChanged(); });
        }
        else
        {
            Snackbar.Add("Error al crear publicación", Severity.Error);
        }
        _processing = false;
        MudDialog.Close(DialogResult.Ok(result?.Id));
    }
    private async void UploadProfilePicture(InputFileChangeEventArgs e)
    {
        var format = "image/png";
        foreach (var image in e.GetMultipleFiles(int.MaxValue))
        {
            var resizedImage = await image.RequestImageFileAsync(format, 400, 400);
            var buffer = new byte[resizedImage.Size];
            await resizedImage.OpenReadStream().ReadAsync(buffer);
            var imageData = $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            var guid = Guid.NewGuid();
            var photoToDb = new Image
                {
                    FileName = guid.ToString(),
                    FileContent = imageData,
                    FileSize = resizedImage.Size,
                    Guid = guid.ToString()
                };
            images.Add(photoToDb);
            await InvokeAsync(() => { StateHasChanged(); });
        }
    }

    private void DeletePhoto(string guid) => images.Remove(images.Where(x => x.Guid == guid).FirstOrDefault());


    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    public void Dispose() => PublicationService.PublicationsChanged -= StateHasChanged;

}
