@inject ISnackbar Snackbar
@inject IEventService EventService
@implements IDisposable

<MudDialog Style="width:90vw">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Reportar Evento
        </MudText>
    </TitleContent>
    <DialogContent>
       Reportar contenido inapropiado. ¿Estas seguro que deseas reportar?

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Class="mr-auto">Cancelar</MudButton>
        <MudButton Color="Color.Info" OnClick="ReportEvent">Reportar</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public EventResponseDTO eventToReport { get; set; } = new EventResponseDTO();

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task ReportEvent()
    {
        var result = await EventService.ReportEvent(eventToReport.Id);
        if (result.Success)
        {
            Snackbar.Add(result.Data, Severity.Success);
            await InvokeAsync(() => { StateHasChanged(); });
        }
        else
        {
            Snackbar.Add(result.Data, Severity.Error);
        }
        MudDialog.Close(DialogResult.Ok(eventToReport.Id));

    }


    protected override async void OnInitialized()
    {
        EventService.EventsChanged += StateHasChanged;
    }

    public void Dispose()
    {
        EventService.EventsChanged -= StateHasChanged;
    }
}