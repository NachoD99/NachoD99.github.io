@inject ISnackbar Snackbar
@inject IUserService UserService
@inject IMapService MapService
@implements IDisposable

<MudDialog Style="width:90vw">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Editar perfil
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 80vh; overflow-y: scroll">
        <MudText Typo="Typo.subtitle2">Datos principales</MudText>
        <MudTextField Value="@user.FirstName" ValueChanged="@( (string s) => ChangeFirstName(s) )" Label="Nombre" ReadOnly="false" />
        <MudTextField Value="@user.LastName"  ValueChanged="@( (string s) => ChangeLastName(s) )" Label="Apellido" ReadOnly="false" />
        <MudTextField T="string" Value="@user.Description"  ValueChanged="@( (string s) => ChangeDescription(s) )" Label="Descripción" ReadOnly="false" Lines="5"/>
        <MudTextField Value="@user.Email"  ValueChanged="@( (string s) => ChangeEmail(s) )" Label="Email" ReadOnly="false" />
        <MudText Class="mt-4" Typo="Typo.subtitle2">Ubicación</MudText>
        <MudStack Row="true" Spacing="1">
            <MudTextField Value="@user.Street" ValueChanged="@( (string s) => ChangeStreet(s) )" Label="Calle" ReadOnly="false" />
            <MudTextField Value="@user.StreetNumber" MaxLength="5" ValueChanged="@( (int s) => ChangeStreetNumber(s) )" Label="Número" ReadOnly="false" />
            </MudStack>
        <MudStack Row="true" Spacing="1">
                <MudPaper Class="pt-3 pb-3" Elevation="0" Style="width:40%;">
                    <MudAutocomplete T="string" MaxItems="24" Label="Provincia" ValueChanged="@( (string s) => ChangeProvince(s) )" Value="user.Province" SearchFunc="@ProvinceSearch"
                                     ResetValueOnEmptyText="@resetValueOnEmptyText4" />
                </MudPaper>
                <MudPaper Class="pa-3" Elevation="0" Style="width:40%;">
                    <MudAutocomplete MaxItems="2000" T="string" ValueChanged="@( (string s) => ChangeCity(s) )" Label="Ciudad" Value="user.Locality" SearchFunc="@CitySearch"
                                     ResetValueOnEmptyText="@resetValueOnEmptyText5" />
                </MudPaper>
                <MudPaper Class="pt-3 pb-3" Elevation="0" Style="width:20%;">
                    <MudTextField Value="@user.ZipCode" Mask="@(new PatternMask("0000"))" ValueChanged="@( (int s) => ChangeZipCode(s) )" Label="Código Postal" ReadOnly="false" />
                </MudPaper>
            </MudStack>
        <MudText Class="mt-4" Typo="Typo.subtitle2">Contacto</MudText>
        <MudTextField Value="@user.Phone"  ValueChanged="@( (string s) => ChangePhone(s) )" Label="Teléfono" ReadOnly="false" />
        <MudTextField Value="@user.FacebookLink" ValueChanged="@( (string s) => ChangeFacebook(s) )" Label="Link de Facebook" ReadOnly="false" />
        <MudTextField Value="@user.InstagramLink" ValueChanged="@( (string s) => ChangeInstagram(s) )" Label="Link de Instagram" ReadOnly="false" />
        <MudTextField Value="@user.WebPageLink" ValueChanged="@( (string s) => ChangeWebPageLink(s) )" Label="Link de página web" ReadOnly="false" />
    </MudContainer>
        </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Info" OnClick="EditUser">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Editando...</MudText>
            }
            else
            {
                <MudText>Editar Usuario</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public UserResponseDTO user { get; set; } = new UserResponseDTO();
    private bool _processing = false;

    private List<string> provinces = new List<string>();
    private List<string> cities = new List<string>();
    
    private bool resetValueOnEmptyText4 = true;
    private bool resetValueOnEmptyText5 = true;

    List<ProvinceResponseDTO> provincesResponse = new List<ProvinceResponseDTO>();
    List<CityResponseDTO> citiesResponse = new List<CityResponseDTO>();

    private void Cancel()
    {
        MudDialog.Cancel();
    }
    
    private void ChangeFirstName(string firstName) => user.FirstName = firstName;
    private void ChangeLastName(string lastName) => user.LastName = lastName;
    private void ChangeDescription(string decription) => user.Description = decription;
    private void ChangeEmail(string email) => user.Email = email;
    private void ChangePhone(string phone) => user.Phone = phone;
    private void ChangeStreet(string street) => user.Street = street;
    private void ChangeStreetNumber(int streetNumber) => user.StreetNumber = streetNumber;
    private void ChangeCity(string city) => user.Locality = city;
    private void ChangeProvince(string province) => user.Province = province;
    private void ChangeZipCode(int zipCode) => user.ZipCode = zipCode;
    private void ChangeFacebook(string facebookLink) => user.FacebookLink = facebookLink;
    private void ChangeInstagram(string instagramLink) => user.InstagramLink = instagramLink;
    private void ChangeWebPageLink(string webPageLink) => user.WebPageLink = webPageLink;

    private async Task EditUser()
    {
        var result = await UserService.EditUserInfo(user);
        _processing = true;
        if (result.Success)
        {
            Snackbar.Add(result.Data, Severity.Success);
            await InvokeAsync(() => { StateHasChanged(); });
        }
        else
        {
            Snackbar.Add(result.Data, Severity.Error);
        }
        _processing = false;
        MudDialog.Close(DialogResult.Ok(user.Id));
        
    }

    protected override async void OnInitialized()
    {
        UserService.OnChange += StateHasChanged;

        provincesResponse = await MapService.GetProvinces();
        foreach (var province in provincesResponse)
        {
            if (!provinces.Contains(province.Name)) provinces.Add(province.Name);
        }
        provinces.Sort();

    }
    private async Task<IEnumerable<string>> ProvinceSearch(string value)
    {
        await Task.Delay(5);

        if (string.IsNullOrEmpty(value))
            return provinces;
        return provinces.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task<IEnumerable<string>> CitySearch(string value)
    {
        await Task.Delay(5);

        cities.Clear();

        if (user.Province != null && user.Province != string.Empty)
        {
            string provinceId = provincesResponse.FirstOrDefault(p => p.Name == user.Province)?.ProvinceId ?? string.Empty;

            if (provinceId != string.Empty) citiesResponse = await MapService.GetCities(provinceId);

            foreach (var city in citiesResponse)
            {
                if (!cities.Contains(city.Name)) cities.Add(city.Name);
            }

            cities.Sort();
        }

        if (string.IsNullOrEmpty(value))
            return cities;
        StateHasChanged();
        return cities.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    public void Dispose()
    {
        UserService.OnChange -= StateHasChanged;
    }
}