@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Components.Forms
@using static MudBlazor.CategoryTypes
@inject IJSRuntime JSRuntime
@inject IDocumentService DocumentService
@inject IUserService UserService
@inject ISnackbar Snackbar

<MudTable Loading="@_loading" Class="mud-width-full mx-0" Items="@Elements" Hover="true" Striped="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Usuarios en espera de aprobación</MudText>
        <MudSpacer />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Fecha</MudTh>
        <MudTh>Usuario</MudTh>
        <MudTh>Declaración Jurada</MudTh>
        <MudTh>Certificado Excención</MudTh>
        <MudTh>Aprobar</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Fecha">@context.CreatedDate.ToShortDateString()</MudTd>
        <MudTd DataLabel="Usuario">@context.UserName</MudTd>
        <MudTd DataLabel="Declaración Jurada">
            <MudIconButton Icon="@Icons.Material.Filled.Download"
                           Size="Size.Small" OnClick="@(() => DownloadFile(context.FileContentSwornDeclaration, context.FileNameSwornDeclaration))">
                Descargar
            </MudIconButton>
            @context.FileNameSwornDeclaration
        </MudTd>
        <MudTd DataLabel="Certificado Excención">
            <MudIconButton Icon="@Icons.Material.Filled.Download"
                           Size="Size.Small" OnClick="@(() => DownloadFile(context.FileContent, context.FileName))">
                Descargar
            </MudIconButton>
            @context.FileName
        </MudTd>
        <MudTd DataLabel="Aprobar">
            <MudStack Row="true">
                <MudIconButton Color="Color.Success" Icon="@Icons.Material.Filled.Check"
                               Size="Size.Small" OnClick="@(() => ApproveUserVerification(context.UserId, context.TransactionID))">
                    Aprobar
                </MudIconButton>
                <MudIconButton Color="Color.Error" Icon="@Icons.Material.Filled.Close"
                               Size="Size.Small" OnClick="@(() => DisapproveUserVerification(context.UserId, context.TransactionID))">
                    Desaprobar
                </MudIconButton>
            </MudStack>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private bool _loading;
    private List<GetCertificatesResponseDTO> Elements = new List<GetCertificatesResponseDTO>();

    protected override async Task OnInitializedAsync()
    {
        _loading = true;
        Elements = await DocumentService.GetCertificates();
        _loading = false;
    }

    private async void DownloadFile(string base64Data, string nombreArchivo)
    {
        // Convierte el archivo Base64 en un array de bytes
        byte[] archivoBytes = Convert.FromBase64String(base64Data);

        await JSRuntime.InvokeVoidAsync("BlazorDownloadFile", nombreArchivo, archivoBytes, "application/pdf");
    }

    private async Task ApproveUserVerification(int userId, string transactionID)
    {
        var response = await UserService.ApproveUserVerification(userId, transactionID);
        Elements.RemoveAll(x => x.TransactionID == transactionID);
        Snackbar.Add(response, Severity.Success);
        await InvokeAsync(() => { StateHasChanged(); });

    }

    private async Task DisapproveUserVerification(int userId, string transactionID)
    {
        var response = await UserService.DisapproveUserVerification(userId, transactionID);
        Elements.RemoveAll(x => x.TransactionID == transactionID);
        Snackbar.Add(response, Severity.Error);
        await InvokeAsync(() => { StateHasChanged(); });
    }
}
